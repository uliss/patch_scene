# cmake_minimum_required(VERSION 3.5)
cmake_minimum_required(VERSION 3.21.1)

if(APPLE)
    set(LANGS CXX OBJCXX)
else()
    set(LANGS CXX)
endif()

project(patch_scene VERSION 0.1 LANGUAGES ${LANGS})

set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)


find_package(QT NAMES Qt6 REQUIRED COMPONENTS Widgets SvgWidgets PrintSupport)
find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Widgets SvgWidgets PrintSupport LinguistTools)

set(PROJECT_SOURCES
        main.cpp
        mainwindow.cpp
        mainwindow.h
        mainwindow.ui
)

if(APPLE)
    list(APPEND PROJECT_SOURCES macos_utils.h macos_utils.mm)
    # The MACOSX_BUNDLE_ICON_FILE variable is added to the Info.plist
    # generated by CMake. This variable contains the .icns file name,
    # without the path.
    set(MACOSX_BUNDLE_ICON_FILE patch_scene.icns)
    # And the following tells CMake where to find and install the file itself.
    set(app_icon_macos "${CMAKE_CURRENT_SOURCE_DIR}/resources/patch_scene.icns")
    set_source_files_properties(${app_icon_macos} PROPERTIES MACOSX_PACKAGE_LOCATION "Resources")

    # Qt for iOS sets MACOSX_BUNDLE_GUI_IDENTIFIER automatically since Qt 6.1.
    # If you are developing for iOS or macOS you should consider setting an
    # explicit, fixed bundle identifier manually though.
    if(${QT_VERSION} VERSION_LESS 6.1.0)
        set(BUNDLE_ID_OPTION MACOSX_BUNDLE_GUI_IDENTIFIER space.ceam.patch_scene)
    endif()
endif()

if(${QT_VERSION_MAJOR} GREATER_EQUAL 6)
    qt_add_executable(patch_scene
        MANUAL_FINALIZATION
        MACOSX_BUNDLE
        ${PROJECT_SOURCES}
        ${app_icon_macos}
        diagram.h diagram.cpp
        device.h device.cpp
        connection.h connection.cpp
        cables_resources.qrc
        deviceproperties.h deviceproperties.cpp deviceproperties.ui
        socket.h socket.cpp
        tablecellcheckbox.h tablecellcheckbox.cpp
        tablecellconnector.h tablecellconnector.cpp
        device_xlet.h device_xlet.cpp
        device_pixmap.h device_pixmap.cpp device_pixmap.ui
        about_window.h about_window.cpp about_window.ui
        preferences_dialog.h preferences_dialog.cpp preferences_dialog.ui
        device_library.h device_library.cpp
        # resources/library.json
        # patch_scene_ru.ts
        undo_commands.h undo_commands.cpp
        device_common.h device_common.cpp
        export_document.h export_document.cpp
    )
# Define target properties for Android with Qt 6 as:
#    set_property(TARGET patch_scene APPEND PROPERTY QT_ANDROID_PACKAGE_SOURCE_DIR
#                 ${CMAKE_CURRENT_SOURCE_DIR}/android)
# For more information, see https://doc.qt.io/qt-6/qt-add-executable.html#target-creation
else()
    if(ANDROID)
        add_library(patch_scene SHARED
            ${PROJECT_SOURCES}
        )
# Define properties for Android with Qt 5 after find_package() calls as:
#    set(ANDROID_PACKAGE_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/android")
    else()
        add_executable(patch_scene
            ${PROJECT_SOURCES}
        )
    endif()
endif()

target_link_libraries(patch_scene
    PRIVATE
    Qt${QT_VERSION_MAJOR}::Widgets Qt${QT_VERSION_MAJOR}::PrintSupport Qt${QT_VERSION_MAJOR}::SvgWidgets)


set_target_properties(patch_scene PROPERTIES
    ${BUNDLE_ID_OPTION}
    MACOSX_BUNDLE_BUNDLE_VERSION ${PROJECT_VERSION}
    MACOSX_BUNDLE_SHORT_VERSION_STRING ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}
    MACOSX_BUNDLE TRUE
    WIN32_EXECUTABLE TRUE
)

include(GNUInstallDirs)
install(TARGETS patch_scene
    BUNDLE DESTINATION .
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
)

if(QT_VERSION_MAJOR EQUAL 6)
    qt_finalize_executable(patch_scene)
    # qt_standard_project_setup(I18N_TRANSLATED_LANGUAGES ru)

    qt_add_translations(
        patch_scene
        TS_FILES patch_scene_ru.ts
    )
endif()

include(InstallRequiredSystemLibraries)

if(APPLE)
    set(MACOSX_BUNDLE_BUNDLE_NAME "PatchScene")
    set(MACOSX_BUNDLE_BUNDLE_VERSION ${PROJECT_VERSION})
    set(MACOSX_BUNDLE_COPYRIGHT "ceam.space")
    set(MACOSX_BUNDLE_GUI_IDENTIFIER "PatchScene")
    set(MACOSX_BUNDLE_SHORT_VERSION_STRING ${PROJECT_VERSION})
    set(MACOSX_BUNDLE_LONG_VERSION_STRING ${PROJECT_VERSION})

    configure_file(scripts/bundle_fix.sh ${PROJECT_BINARY_DIR}/bundle_fix.sh @ONLY)

    # MACOSX_BUNDLE_ICON_FILE
    #     Sets CFBundleIconFile.
    # MACOSX_BUNDLE_INFO_STRING
    #     Sets CFBundleGetInfoString.

    set(CPACK_GENERATOR "DragNDrop")
    include(CPack)
endif()
